#!/usr/bin/perl

### process_pileup_overlap_reads.pl ###############################################################
# Process a pileup file generated by generate_pileup_features and add overlapped pair reads
# features.

### HISTORY #######################################################################################
# Version       Date            Developer           Comments
# 0.01          2014-06-16      rdeborja            initial development

### INCLUDES ######################################################################################
use warnings;
use strict;
use Carp;
use Getopt::Long;
use Pod::Usage;
use NGS::Tools::BamUtils;

### COMMAND LINE DEFAULT ARGUMENTS ################################################################
# list of arguments and default values go here as hash key/value pairs
our %opts = (
	pileup => undef,
	output => ''
    );

### MAIN CALLER ###################################################################################
my $result = main();
exit($result);

### FUNCTIONS #####################################################################################

### main ##########################################################################################
# Description:
#   Main subroutine for program
# Input Variables:
#   %opts = command line arguments
# Output Variables:
#   N/A

sub main {
    # get the command line arguments
    GetOptions(
        \%opts,
        "help|?",
        "man",
        "pileup|p=s",
        "output|o:s"
        ) or pod2usage(64);
    
    pod2usage(1) if $opts{'help'};
    pod2usage(-exitstatus => 0, -verbose => 2) if $opts{'man'};

    while(my ($arg, $value) = each(%opts)) {
        if (!defined($value)) {
            print "ERROR: Missing argument \n";
            pod2usage(128);
            }
        }

    my $bamutils = NGS::Tools::BamUtils->new();
    my $data = $bamutils->import_pileup_file(pileup => $opts{'pileup'});
    my $header = $bamutils->header(data => $data);
    my $pileup_data = $bamutils->process_overlapping_reads(data => $data);
    my $sorted_pileup_data = $bamutils->sort_array_by_readid(data => $pileup_data);
    $bamutils->print_pileup_data(
    	data => $sorted_pileup_data,
    	header => $header,
    	output => $opts{'output'}
    	);

    return 0;
    }


__END__


=head1 NAME

process_pileup_overlap_reads.pl

=head1 SYNOPSIS

B<process_pileup_overlap_reads.pl> [options] [file ...]

    Options:
    --help          brief help message
    --man           full documentation
    --pileup        name of output file from generate_base_features.pl to process (required)
    --output        name of output file to write data to (optional)

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page.

=item B<--pileup>

Name of pileup output from generate_base_features.pl script.  Required

=item B<--output>

Output filename to write data to.  Optional

=back

=head1 DESCRIPTION

B<process_pileup_overlap_reads.pl> Process a pileup file generated by generate_pileup_features and add overlapped pair reads features.

=head1 EXAMPLE

process_pileup_overlap_reads.pl  --pileup pileup.txt --output overlap.pileup.txt

=head1 AUTHOR

Richard de Borja -- Molecular Genetics

The Hospital for Sick Children

=head1 SEE ALSO

=cut

